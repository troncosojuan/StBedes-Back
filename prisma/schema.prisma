generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model question {
  question_id              Int                        @id
  section                  String?
  title                    String?
  content                  String?
  type                     Int?
  question_type_id         Int?
  question_type            question_type?             @relation(fields: [question_type_id], references: [question_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question_type")
  question_by_student      question_by_student[]
  question_student_teacher question_student_teacher[]
}

model question_by_student {
  student_id  Int?
  question_id Int?
  answer      String?
  anser_date  String?
  is_answered Boolean?
  row_number  Int?
  id          Int       @id @default(autoincrement())
  question    question? @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qbs_question")
  student     student?  @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qbs_student")
}

model question_student_teacher {
  row_number  Int       @id
  set_id      Int?
  student_id  Int?
  teacher_id  Int?
  question_id Int?
  answer      String?
  answer_date String?
  is_answered Boolean?
  is_included Boolean?
  question    question? @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qst_question")
  set         set?      @relation(fields: [set_id], references: [set_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qst_set")
  student     student?  @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qst_student")
  teacher     teacher?  @relation(fields: [teacher_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_qst_teacher")
}

model question_type {
  question_type_id Int        @id
  options          Json?
  type             String?
  question         question[]
}

model set {
  set_id                   Int                        @id
  subject_id               Int?
  year_id                  Int?
  set_code                 String?
  last_update_api_date     DateTime?                  @db.Timestamptz(6)
  is_included              Boolean?
  question_student_teacher question_student_teacher[]
  subject                  subject?                   @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_set_subject")
  set_list                 set_list[]
  teacher_by_set           teacher_by_set[]
}

model set_list {
  set_list_id          Int       @id
  set_id               Int?
  student_id           Int?
  last_update_api_date DateTime? @db.Timestamptz(6)
  set                  set?      @relation(fields: [set_id], references: [set_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_setlist_set")
  student              student?  @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_setlist_student")
}

model student {
  student_id               Int                        @id
  person_id                Int?
  family_Id                Int?
  title                    String?
  forename                 String?
  surname                  String?
  middle_name              String?
  initials                 String?
  preferred_name           String?
  fullname                 String?
  gender                   String?
  form                     String?
  email_address            String?
  pupil_type               String?
  enrolment_date           String?
  enrolment_school_year    Int?
  password                 String?
  question_by_student      question_by_student[]
  question_student_teacher question_student_teacher[]
  set_list                 set_list[]
}

model subject {
  subject_id           Int       @id
  subject_name         String?
  department_id        Int?
  last_update_api_date DateTime? @db.Timestamptz(6)
  is_included          Boolean?
  set                  set[]
}

model survey_status {
  survey  String?
  section String?
  is_open Boolean?
  id      Int      @id @default(autoincrement())
}

model teacher {
  staff_id                 Int                        @id
  person_id                Int?
  title                    String?
  forename                 String?
  surname                  String?
  middle_names             String?
  initials                 String?
  preferred_name           String?
  full_name                String?
  gender                   String?
  school_email_address     String?
  question_student_teacher question_student_teacher[]
  teacher_by_set           teacher_by_set[]
}

model active_question_student {
  id               Int     @id(map: "active_question_student_pk") @default(autoincrement())
  question_content String  @db.VarChar
  question_options String? @db.VarChar
  teacher_name     String? @db.VarChar
  student_id       Int
  subject_name     String? @db.VarChar
  section          String  @db.VarChar
  is_answered      Boolean
  is_active        Boolean

  @@index([id, student_id], map: "active_question_student_id_idx")
}

model teacher_by_set {
  set_id             Int
  teacher_id         Int
  is_primary_teacher Boolean
  set                set     @relation(fields: [set_id], references: [set_id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_by_set_set_fk")
  teacher            teacher @relation(fields: [teacher_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction, map: "teacher_by_set_teacher_fk")

  @@id([set_id, teacher_id], map: "teacher_by_set_pk")
}
